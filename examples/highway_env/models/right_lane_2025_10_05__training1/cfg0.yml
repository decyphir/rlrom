cfg_env:
  action: {type: DiscreteMetaAction}
  collision_reward: -10.0
  controlled_vehicles: 1
  duration: 100
  ego_spacing: 2
  high_speed_reward: 0.0
  initial_lane_id: null
  lane_change_reward: 0.0
  lanes_count: 4
  manual_control: false
  normalize_reward: false
  observation:
    absolute: false
    features: [presence, x, y, vx, vy]
    normalize: true
    type: Kinematics
  offroad_terminal: false
  reward_speed_range: [20, 30]
  right_lane_reward: 0.0
  vehicles_count: 50
  vehicles_density: 0.75
cfg_specs:
  BigM: 10
  action_names: {action: action}
  env_name: highway-v0
  eval_formulas:
    car_left: {eval_all_steps: true, past_horizon: 0}
    ego_fast: {eval_all_steps: true, past_horizon: 0}
    ego_moves: {eval_all_steps: true, past_horizon: 0}
    ego_right_lane: {eval_all_steps: true, past_horizon: 0}
    phi_car_left: {eval_all_steps: false, t0: 0}
    phi_right_lane: {eval_all_steps: false, t0: 0}
    phi_speed: {eval_all_steps: false, t0: 0}
  obs_names: {car1_presence: 'obs[1][0]', car1_vx: '80*obs[1][3]', car1_vy: '80*obs[1][4]',
    car1_x: 'obs[1][1]', car1_y: 'obs[1][2]', car2_presence: 'obs[2][0]', car2_vx: '80*obs[2][3]',
    car2_vy: '80*obs[2][4]', car2_x: 'obs[2][1]', car2_y: 'obs[2][2]', car3_presence: 'obs[3][0]',
    car3_vx: '80*obs[3][3]', car3_vy: '80*obs[3][4]', car3_x: 'obs[3][1]', car3_y: 'obs[3][2]',
    ego_presence: 'obs[0][0]', ego_vx: '80*obs[0][3]', ego_vy: '80*obs[0][4]', ego_x: 'obs[0][1]',
    ego_y: 'obs[0][2]'}
  real_time_step: 1.0
  reward_formulas:
    danger: {lower_bound: 0.0, past_horizon: 0, weight: -20}
    ego_fast: {past_horizon: 0, weight: 0.1}
    ego_right_lane: {past_horizon: 0, weight: 1}
  specs: "signal action, ego_presence, ego_x, ego_y, ego_vx, ego_vy, \n       car1_presence,
    car1_x, car1_y, car1_vx, car1_vy, \n       car2_presence, car2_x, car2_y, car2_vx,
    car2_vy, \n       car3_presence, car3_x, car3_y, car3_vx, car3_vy, \n       reward\n\n#
    Speed formulas\nego_moves := ego_vx[t] > 0 # used for evaluation\nego_slow  :=
    ego_vx[t] < 22\nego_fast  := ego_vx[t] > 25\n\n# Danger formmulas\ncar1_same_lane
    \ := abs(car1_y[t]) < 0.1  \ncar1_too_close := abs(car1_x[t]) < 0.1 \ncar1_danger
    := car1_same_lane and car1_too_close\n\ncar2_same_lane  := abs(car2_y[t]) < 0.1\ncar2_too_close
    \ := abs(car2_x[t]) < 0.1 \ncar2_danger := car2_same_lane and car2_too_close\n\ncar3_same_lane
    \ := abs(car3_y[t]) < 0.1\ncar3_too_close  := abs(car3_x[t]) < 0.1 \ncar3_danger
    := car3_same_lane and car3_too_close\n\ndanger := car1_danger or car2_danger or
    car3_danger\n\n# Right lane formulas\nego_right_lane := ego_y[t] > 0.6\n  \n#
    There is a car on the left \ncar1_left := car1_y[t] > -.35 and car1_y[t] < -.15
    and car1_too_close\ncar2_left := car2_y[t] > -.35 and car2_y[t] < -.15 and car2_too_close\ncar3_left
    := car3_y[t] > -.35 and car3_y[t] < -.15 and car3_too_close\ncar_left := car1_left
    or car2_left or car3_left\n\n# Full episode formulas\n\nphi_speed := alw_[0,50]
    ev_[0,10] ego_fast \nphi_right_lane := alw_[0,50] ev_[0,10] ego_right_lane\nphi_car_left
    := alw_[0,50] ev_[0,10] (not car_left)\n"
cfg_test: {init_seeds: 0, num_ep: 10, num_steps: 100, render_human: human}
cfg_train:
  algo:
    ppo:
      batch_size: 128
      device: cpu
      learning_rate: 0.0005
      policy_kwargs:
        activation_fn: ReLU
        net_arch: [128, 128, 128]
      tensorboard_log: ./tb_logs
      verbose: 1
  eval_freq: 15000
  n_envs: 4
  total_timesteps: 200000
env_name: highway-v0
import_module: highway
make_env_test: make_env_test
make_env_train: make_env_train
model_name: right_lane
model_path: ./models
this_cfg_pathdir: /home/alex/workspace/rlrom/examples/highway_env
